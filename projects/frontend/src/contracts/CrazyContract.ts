/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"CrazyContract","structs":{},"methods":[{"name":"create_application","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":["NoOp"],"call":[]}},{"name":"donate","args":[{"name":"amount","type":"uint64"},{"name":"payment_transaction","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"withdraw","args":[{"name":"amount","type":"uint64"},{"name":"receiver","type":"account"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"get_total_donations","args":[],"returns":{"type":"uint64"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"get_donations","args":[{"name":"account","type":"account"}],"returns":{"type":"uint64"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"delete","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["DeleteApplication"]}}],"state":{"schema":{"global":{"ints":1,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"owner":{"key":"b3duZXI=","keyType":"AVMString","valueType":"AVMBytes"},"totalDonations":{"key":"dG90YWxEb25hdGlvbnM=","keyType":"AVMString","valueType":"AVMUint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"bareActions":{"create":[],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the CrazyContract contract
 */
export type CrazyContractArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create_application()void': Record<string, never>
    'donate(uint64,pay)void': {
      amount: bigint | number
      paymentTransaction: AppMethodCallTransactionArgument
    }
    'withdraw(uint64,account)void': {
      amount: bigint | number
      receiver: Uint8Array | string
    }
    'get_total_donations()uint64': Record<string, never>
    'get_donations(account)uint64': {
      account: Uint8Array | string
    }
    'delete()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create_application()void': []
    'donate(uint64,pay)void': [amount: bigint | number, paymentTransaction: AppMethodCallTransactionArgument]
    'withdraw(uint64,account)void': [amount: bigint | number, receiver: Uint8Array | string]
    'get_total_donations()uint64': []
    'get_donations(account)uint64': [account: Uint8Array | string]
    'delete()void': []
  }
}

/**
 * The return type for each method
 */
export type CrazyContractReturns = {
  'create_application()void': void
  'donate(uint64,pay)void': void
  'withdraw(uint64,account)void': void
  'get_total_donations()uint64': bigint
  'get_donations(account)uint64': bigint
  'delete()void': void
}

/**
 * Defines the types of available calls and state of the CrazyContract smart contract.
 */
export type CrazyContractTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_application()void' | 'create_application', {
      argsObj: CrazyContractArgs['obj']['create_application()void']
      argsTuple: CrazyContractArgs['tuple']['create_application()void']
      returns: CrazyContractReturns['create_application()void']
    }>
    & Record<'donate(uint64,pay)void' | 'donate', {
      argsObj: CrazyContractArgs['obj']['donate(uint64,pay)void']
      argsTuple: CrazyContractArgs['tuple']['donate(uint64,pay)void']
      returns: CrazyContractReturns['donate(uint64,pay)void']
    }>
    & Record<'withdraw(uint64,account)void' | 'withdraw', {
      argsObj: CrazyContractArgs['obj']['withdraw(uint64,account)void']
      argsTuple: CrazyContractArgs['tuple']['withdraw(uint64,account)void']
      returns: CrazyContractReturns['withdraw(uint64,account)void']
    }>
    & Record<'get_total_donations()uint64' | 'get_total_donations', {
      argsObj: CrazyContractArgs['obj']['get_total_donations()uint64']
      argsTuple: CrazyContractArgs['tuple']['get_total_donations()uint64']
      returns: CrazyContractReturns['get_total_donations()uint64']
    }>
    & Record<'get_donations(account)uint64' | 'get_donations', {
      argsObj: CrazyContractArgs['obj']['get_donations(account)uint64']
      argsTuple: CrazyContractArgs['tuple']['get_donations(account)uint64']
      returns: CrazyContractReturns['get_donations(account)uint64']
    }>
    & Record<'delete()void' | 'delete', {
      argsObj: CrazyContractArgs['obj']['delete()void']
      argsTuple: CrazyContractArgs['tuple']['delete()void']
      returns: CrazyContractReturns['delete()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        owner: BinaryState
        totalDonations: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type CrazyContractSignatures = keyof CrazyContractTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type CrazyContractNonVoidMethodSignatures = keyof CrazyContractTypes['methods'] extends infer T ? T extends keyof CrazyContractTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the CrazyContract smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends CrazyContractSignatures> = CrazyContractTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CrazyContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CrazyContractSignatures> = CrazyContractTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = CrazyContractTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type CrazyContractCreateCallParams =
  | Expand<CallParams<CrazyContractArgs['obj']['create_application()void'] | CrazyContractArgs['tuple']['create_application()void']> & {method: 'create_application'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<CrazyContractArgs['obj']['create_application()void'] | CrazyContractArgs['tuple']['create_application()void']> & {method: 'create_application()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported delete method params for this smart contract
 */
export type CrazyContractDeleteCallParams =
  | Expand<CallParams<CrazyContractArgs['obj']['delete()void'] | CrazyContractArgs['tuple']['delete()void']> & {method: 'delete'}>
  | Expand<CallParams<CrazyContractArgs['obj']['delete()void'] | CrazyContractArgs['tuple']['delete()void']> & {method: 'delete()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type CrazyContractDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: CrazyContractCreateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: CrazyContractDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the CrazyContract smart contract
 */
export abstract class CrazyContractParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends CrazyContractCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create_application':
          case 'create_application()void':
            return CrazyContractParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the CrazyContract smart contract using the create_application()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<CrazyContractArgs['obj']['create_application()void'] | CrazyContractArgs['tuple']['create_application()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create_application()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends CrazyContractDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'delete':
          case 'delete()void':
            return CrazyContractParamsFactory.delete.delete(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the CrazyContract smart contract using the delete()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      delete(params: CallParams<CrazyContractArgs['obj']['delete()void'] | CrazyContractArgs['tuple']['delete()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'delete()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the donate(uint64,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static donate(params: CallParams<CrazyContractArgs['obj']['donate(uint64,pay)void'] | CrazyContractArgs['tuple']['donate(uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'donate(uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount, params.args.paymentTransaction],
    }
  }
  /**
   * Constructs a no op call for the withdraw(uint64,account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdraw(params: CallParams<CrazyContractArgs['obj']['withdraw(uint64,account)void'] | CrazyContractArgs['tuple']['withdraw(uint64,account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdraw(uint64,account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount, params.args.receiver],
    }
  }
  /**
   * Constructs a no op call for the get_total_donations()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTotalDonations(params: CallParams<CrazyContractArgs['obj']['get_total_donations()uint64'] | CrazyContractArgs['tuple']['get_total_donations()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_total_donations()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_donations(account)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getDonations(params: CallParams<CrazyContractArgs['obj']['get_donations(account)uint64'] | CrazyContractArgs['tuple']['get_donations(account)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_donations(account)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.account],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the CrazyContract smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class CrazyContractFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `CrazyContractFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new CrazyContractClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new CrazyContractClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the CrazyContract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: CrazyContractDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? CrazyContractParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (CrazyContractCreateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? CrazyContractParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (CrazyContractDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new CrazyContractClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CrazyContract smart contract using the create_application()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<CrazyContractArgs['obj']['create_application()void'] | CrazyContractArgs['tuple']['create_application()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(CrazyContractParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the CrazyContract smart contract using the delete()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      delete: (params: CallParams<CrazyContractArgs['obj']['delete()void'] | CrazyContractArgs['tuple']['delete()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(CrazyContractParamsFactory.delete.delete(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CrazyContract smart contract using the create_application()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<CrazyContractArgs['obj']['create_application()void'] | CrazyContractArgs['tuple']['create_application()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(CrazyContractParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CrazyContract smart contract using an ABI method call using the create_application()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<CrazyContractArgs['obj']['create_application()void'] | CrazyContractArgs['tuple']['create_application()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(CrazyContractParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | CrazyContractReturns['create_application()void']) }, appClient: new CrazyContractClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the CrazyContract smart contract
 */
export class CrazyContractClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `CrazyContractClient`
   *
   * @param appClient An `AppClient` instance which has been created with the CrazyContract app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `CrazyContractClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends CrazyContractNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `CrazyContractClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<CrazyContractClient> {
    return new CrazyContractClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `CrazyContractClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<CrazyContractClient> {
    return new CrazyContractClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the CrazyContract smart contract using the `delete()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      delete: (params: CallParams<CrazyContractArgs['obj']['delete()void'] | CrazyContractArgs['tuple']['delete()void']> = {args: []}) => {
        return this.appClient.params.delete(CrazyContractParamsFactory.delete.delete(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the CrazyContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the CrazyContract smart contract using the `donate(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    donate: (params: CallParams<CrazyContractArgs['obj']['donate(uint64,pay)void'] | CrazyContractArgs['tuple']['donate(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CrazyContractParamsFactory.donate(params))
    },

    /**
     * Makes a call to the CrazyContract smart contract using the `withdraw(uint64,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdraw: (params: CallParams<CrazyContractArgs['obj']['withdraw(uint64,account)void'] | CrazyContractArgs['tuple']['withdraw(uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CrazyContractParamsFactory.withdraw(params))
    },

    /**
     * Makes a call to the CrazyContract smart contract using the `get_total_donations()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTotalDonations: (params: CallParams<CrazyContractArgs['obj']['get_total_donations()uint64'] | CrazyContractArgs['tuple']['get_total_donations()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(CrazyContractParamsFactory.getTotalDonations(params))
    },

    /**
     * Makes a call to the CrazyContract smart contract using the `get_donations(account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getDonations: (params: CallParams<CrazyContractArgs['obj']['get_donations(account)uint64'] | CrazyContractArgs['tuple']['get_donations(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CrazyContractParamsFactory.getDonations(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the CrazyContract smart contract using the `delete()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      delete: (params: CallParams<CrazyContractArgs['obj']['delete()void'] | CrazyContractArgs['tuple']['delete()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(CrazyContractParamsFactory.delete.delete(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the CrazyContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the CrazyContract smart contract using the `donate(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    donate: (params: CallParams<CrazyContractArgs['obj']['donate(uint64,pay)void'] | CrazyContractArgs['tuple']['donate(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CrazyContractParamsFactory.donate(params))
    },

    /**
     * Makes a call to the CrazyContract smart contract using the `withdraw(uint64,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdraw: (params: CallParams<CrazyContractArgs['obj']['withdraw(uint64,account)void'] | CrazyContractArgs['tuple']['withdraw(uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CrazyContractParamsFactory.withdraw(params))
    },

    /**
     * Makes a call to the CrazyContract smart contract using the `get_total_donations()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTotalDonations: (params: CallParams<CrazyContractArgs['obj']['get_total_donations()uint64'] | CrazyContractArgs['tuple']['get_total_donations()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(CrazyContractParamsFactory.getTotalDonations(params))
    },

    /**
     * Makes a call to the CrazyContract smart contract using the `get_donations(account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getDonations: (params: CallParams<CrazyContractArgs['obj']['get_donations(account)uint64'] | CrazyContractArgs['tuple']['get_donations(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CrazyContractParamsFactory.getDonations(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the CrazyContract smart contract using the `delete()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      delete: async (params: CallParams<CrazyContractArgs['obj']['delete()void'] | CrazyContractArgs['tuple']['delete()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(CrazyContractParamsFactory.delete.delete(params))
        return {...result, return: result.return as unknown as (undefined | CrazyContractReturns['delete()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the CrazyContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the CrazyContract smart contract using the `donate(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    donate: async (params: CallParams<CrazyContractArgs['obj']['donate(uint64,pay)void'] | CrazyContractArgs['tuple']['donate(uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CrazyContractParamsFactory.donate(params))
      return {...result, return: result.return as unknown as (undefined | CrazyContractReturns['donate(uint64,pay)void'])}
    },

    /**
     * Makes a call to the CrazyContract smart contract using the `withdraw(uint64,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdraw: async (params: CallParams<CrazyContractArgs['obj']['withdraw(uint64,account)void'] | CrazyContractArgs['tuple']['withdraw(uint64,account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CrazyContractParamsFactory.withdraw(params))
      return {...result, return: result.return as unknown as (undefined | CrazyContractReturns['withdraw(uint64,account)void'])}
    },

    /**
     * Makes a call to the CrazyContract smart contract using the `get_total_donations()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTotalDonations: async (params: CallParams<CrazyContractArgs['obj']['get_total_donations()uint64'] | CrazyContractArgs['tuple']['get_total_donations()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(CrazyContractParamsFactory.getTotalDonations(params))
      return {...result, return: result.return as unknown as (undefined | CrazyContractReturns['get_total_donations()uint64'])}
    },

    /**
     * Makes a call to the CrazyContract smart contract using the `get_donations(account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getDonations: async (params: CallParams<CrazyContractArgs['obj']['get_donations(account)uint64'] | CrazyContractArgs['tuple']['get_donations(account)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CrazyContractParamsFactory.getDonations(params))
      return {...result, return: result.return as unknown as (undefined | CrazyContractReturns['get_donations(account)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new CrazyContractClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current CrazyContract app
   */
  state = {
    /**
     * Methods to access global state for the current CrazyContract app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          owner: new BinaryStateValue(result.owner),
          totalDonations: result.totalDonations,
        }
      },
      /**
       * Get the current value of the owner key in global state
       */
      owner: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("owner")) as Uint8Array | undefined) },
      /**
       * Get the current value of the totalDonations key in global state
       */
      totalDonations: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalDonations")) as bigint | undefined },
    },
  }

  public newGroup(): CrazyContractComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a donate(uint64,pay)void method call against the CrazyContract contract
       */
      donate(params: CallParams<CrazyContractArgs['obj']['donate(uint64,pay)void'] | CrazyContractArgs['tuple']['donate(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.donate(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withdraw(uint64,account)void method call against the CrazyContract contract
       */
      withdraw(params: CallParams<CrazyContractArgs['obj']['withdraw(uint64,account)void'] | CrazyContractArgs['tuple']['withdraw(uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdraw(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_total_donations()uint64 method call against the CrazyContract contract
       */
      getTotalDonations(params: CallParams<CrazyContractArgs['obj']['get_total_donations()uint64'] | CrazyContractArgs['tuple']['get_total_donations()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTotalDonations(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_total_donations()uint64', v))
        return this
      },
      /**
       * Add a get_donations(account)uint64 method call against the CrazyContract contract
       */
      getDonations(params: CallParams<CrazyContractArgs['obj']['get_donations(account)uint64'] | CrazyContractArgs['tuple']['get_donations(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getDonations(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_donations(account)uint64', v))
        return this
      },
      get delete() {
        return {
          delete: (params: CallParams<CrazyContractArgs['obj']['delete()void'] | CrazyContractArgs['tuple']['delete()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.delete(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the CrazyContract contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as CrazyContractComposer
  }
}
export type CrazyContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the donate(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  donate(params?: CallParams<CrazyContractArgs['obj']['donate(uint64,pay)void'] | CrazyContractArgs['tuple']['donate(uint64,pay)void']>): CrazyContractComposer<[...TReturns, CrazyContractReturns['donate(uint64,pay)void'] | undefined]>

  /**
   * Calls the withdraw(uint64,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdraw(params?: CallParams<CrazyContractArgs['obj']['withdraw(uint64,account)void'] | CrazyContractArgs['tuple']['withdraw(uint64,account)void']>): CrazyContractComposer<[...TReturns, CrazyContractReturns['withdraw(uint64,account)void'] | undefined]>

  /**
   * Calls the get_total_donations()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTotalDonations(params?: CallParams<CrazyContractArgs['obj']['get_total_donations()uint64'] | CrazyContractArgs['tuple']['get_total_donations()uint64']>): CrazyContractComposer<[...TReturns, CrazyContractReturns['get_total_donations()uint64'] | undefined]>

  /**
   * Calls the get_donations(account)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getDonations(params?: CallParams<CrazyContractArgs['obj']['get_donations(account)uint64'] | CrazyContractArgs['tuple']['get_donations(account)uint64']>): CrazyContractComposer<[...TReturns, CrazyContractReturns['get_donations(account)uint64'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the CrazyContract smart contract using the delete()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    delete(params?: CallParams<CrazyContractArgs['obj']['delete()void'] | CrazyContractArgs['tuple']['delete()void']>): CrazyContractComposer<[...TReturns, CrazyContractReturns['delete()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the CrazyContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): CrazyContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): CrazyContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<CrazyContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<CrazyContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<CrazyContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<CrazyContractComposerResults<TReturns>>
}
export type CrazyContractComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

