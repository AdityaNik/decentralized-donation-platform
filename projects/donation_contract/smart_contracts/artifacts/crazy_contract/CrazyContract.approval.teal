#pragma version 10
#pragma typetrack false

// smart_contracts.crazy_contract.contract.CrazyContract.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 1000
    bytecblock "totalDonations" "owner" 0x151f7c75 "doners"
    // smart_contracts/crazy_contract/contract.py:13
    // class CrazyContract(ARC4Contract):
    txn NumAppArgs
    bz main_after_if_else@11
    pushbytess 0x752c3ac0 0xb1b073cd 0x1951e44f 0x9fd6c978 0xbbbf630e 0x24378d3c // method "create_application()void", method "donate(uint64,pay)void", method "withdraw(uint64,account)void", method "get_total_donations()uint64", method "get_donations(account)uint64", method "delete()void"
    txna ApplicationArgs 0
    match main_create_application_route@5 main_donate_route@6 main_withdraw_route@7 main_get_total_donations_route@8 main_get_donations_route@9 main_delete_route@10

main_after_if_else@11:
    // smart_contracts/crazy_contract/contract.py:13
    // class CrazyContract(ARC4Contract):
    intc_0 // 0
    return

main_delete_route@10:
    // smart_contracts/crazy_contract/contract.py:58
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    pushint 5 // DeleteApplication
    ==
    assert // OnCompletion is not DeleteApplication
    txn ApplicationID
    assert // can only call when not creating
    callsub delete
    intc_1 // 1
    return

main_get_donations_route@9:
    // smart_contracts/crazy_contract/contract.py:54
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/crazy_contract/contract.py:13
    // class CrazyContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/crazy_contract/contract.py:54
    // @arc4.abimethod
    callsub get_donations
    itob
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_get_total_donations_route@8:
    // smart_contracts/crazy_contract/contract.py:50
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_total_donations
    itob
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_withdraw_route@7:
    // smart_contracts/crazy_contract/contract.py:37
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/crazy_contract/contract.py:13
    // class CrazyContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    // smart_contracts/crazy_contract/contract.py:37
    // @arc4.abimethod
    callsub withdraw
    intc_1 // 1
    return

main_donate_route@6:
    // smart_contracts/crazy_contract/contract.py:26
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/crazy_contract/contract.py:13
    // class CrazyContract(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/crazy_contract/contract.py:26
    // @arc4.abimethod
    callsub donate
    intc_1 // 1
    return

main_create_application_route@5:
    // smart_contracts/crazy_contract/contract.py:21
    // @arc4.abimethod(create="require")
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    callsub create_application
    intc_1 // 1
    return


// smart_contracts.crazy_contract.contract.CrazyContract.create_application() -> void:
create_application:
    // smart_contracts/crazy_contract/contract.py:21-22
    // @arc4.abimethod(create="require")
    // def create_application(self)->None:
    proto 0 0
    // smart_contracts/crazy_contract/contract.py:23
    // self.owner = Global.creator_address
    bytec_1 // "owner"
    global CreatorAddress
    app_global_put
    // smart_contracts/crazy_contract/contract.py:24
    // self.totalDonations = UInt64(0)
    bytec_0 // "totalDonations"
    intc_0 // 0
    app_global_put
    retsub


// smart_contracts.crazy_contract.contract.CrazyContract.donate(amount: uint64, payment_transaction: uint64) -> void:
donate:
    // smart_contracts/crazy_contract/contract.py:26-27
    // @arc4.abimethod
    // def donate(self, amount: UInt64, payment_transaction:gtxn.PaymentTransaction )->None:
    proto 2 0
    // smart_contracts/crazy_contract/contract.py:28
    // assert payment_transaction.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/crazy_contract/contract.py:29
    // assert amount > UInt64(0)
    frame_dig -2
    assert
    // smart_contracts/crazy_contract/contract.py:31
    // if payment_transaction.sender not in self.doners:
    frame_dig -1
    gtxns Sender
    bytec_3 // "doners"
    swap
    concat
    dup
    box_len
    bury 1
    bnz donate_after_if_else@2
    // smart_contracts/crazy_contract/contract.py:32
    // self.doners[payment_transaction.sender] = UInt64(0)
    intc_0 // 0
    itob
    frame_dig 0
    swap
    box_put

donate_after_if_else@2:
    // smart_contracts/crazy_contract/contract.py:34
    // self.totalDonations += amount
    intc_0 // 0
    bytec_0 // "totalDonations"
    app_global_get_ex
    assert // check self.totalDonations exists
    frame_dig -2
    +
    bytec_0 // "totalDonations"
    swap
    app_global_put
    // smart_contracts/crazy_contract/contract.py:35
    // self.doners[payment_transaction.sender] += amount
    frame_dig 0
    dup
    box_get
    swap
    btoi
    swap
    assert // check self.doners entry exists
    frame_dig -2
    +
    itob
    box_put
    retsub


// smart_contracts.crazy_contract.contract.CrazyContract.withdraw(amount: uint64, receiver: bytes) -> void:
withdraw:
    // smart_contracts/crazy_contract/contract.py:37-38
    // @arc4.abimethod
    // def withdraw(self, amount: UInt64, receiver: Account)->None:
    proto 2 0
    // smart_contracts/crazy_contract/contract.py:39
    // assert Txn.sender == self.owner
    txn Sender
    intc_0 // 0
    bytec_1 // "owner"
    app_global_get_ex
    assert // check self.owner exists
    ==
    assert
    // smart_contracts/crazy_contract/contract.py:40
    // assert amount > UInt64(0)
    frame_dig -2
    assert
    // smart_contracts/crazy_contract/contract.py:41
    // assert self.totalDonations >= amount
    intc_0 // 0
    bytec_0 // "totalDonations"
    app_global_get_ex
    assert // check self.totalDonations exists
    frame_dig -2
    >=
    assert
    // smart_contracts/crazy_contract/contract.py:43-47
    // itxn.Payment(
    //     amount=amount,
    //     receiver=receiver,
    //     fee=1000,
    // ).submit()
    itxn_begin
    frame_dig -1
    itxn_field Receiver
    frame_dig -2
    itxn_field Amount
    // smart_contracts/crazy_contract/contract.py:43
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    // smart_contracts/crazy_contract/contract.py:46
    // fee=1000,
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/crazy_contract/contract.py:43-47
    // itxn.Payment(
    //     amount=amount,
    //     receiver=receiver,
    //     fee=1000,
    // ).submit()
    itxn_submit
    // smart_contracts/crazy_contract/contract.py:48
    // self.totalDonations -= amount
    intc_0 // 0
    bytec_0 // "totalDonations"
    app_global_get_ex
    assert // check self.totalDonations exists
    frame_dig -2
    -
    bytec_0 // "totalDonations"
    swap
    app_global_put
    retsub


// smart_contracts.crazy_contract.contract.CrazyContract.get_total_donations() -> uint64:
get_total_donations:
    // smart_contracts/crazy_contract/contract.py:50-51
    // @arc4.abimethod
    // def get_total_donations(self)->UInt64:
    proto 0 1
    // smart_contracts/crazy_contract/contract.py:52
    // return self.totalDonations
    intc_0 // 0
    bytec_0 // "totalDonations"
    app_global_get_ex
    assert // check self.totalDonations exists
    retsub


// smart_contracts.crazy_contract.contract.CrazyContract.get_donations(account: bytes) -> uint64:
get_donations:
    // smart_contracts/crazy_contract/contract.py:54-55
    // @arc4.abimethod
    // def get_donations(self, account: Account)->UInt64:
    proto 1 1
    // smart_contracts/crazy_contract/contract.py:56
    // return self.doners[account]
    bytec_3 // "doners"
    frame_dig -1
    concat
    box_get
    swap
    btoi
    swap
    assert // check self.doners entry exists
    retsub


// smart_contracts.crazy_contract.contract.CrazyContract.delete() -> void:
delete:
    // smart_contracts/crazy_contract/contract.py:58-59
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    // def delete(self)->None:
    proto 0 0
    // smart_contracts/crazy_contract/contract.py:60
    // assert Txn.sender == self.owner
    txn Sender
    intc_0 // 0
    bytec_1 // "owner"
    app_global_get_ex
    assert // check self.owner exists
    ==
    assert
    // smart_contracts/crazy_contract/contract.py:61-66
    // itxn.Payment(
    //     receiver=self.owner,
    //     amount=0,
    //     close_remainder_to=self.owner,
    //     fee=1000,
    // ).submit()
    itxn_begin
    // smart_contracts/crazy_contract/contract.py:62
    // receiver=self.owner,
    intc_0 // 0
    bytec_1 // "owner"
    app_global_get_ex
    assert // check self.owner exists
    // smart_contracts/crazy_contract/contract.py:64
    // close_remainder_to=self.owner,
    intc_0 // 0
    bytec_1 // "owner"
    app_global_get_ex
    assert // check self.owner exists
    itxn_field CloseRemainderTo
    // smart_contracts/crazy_contract/contract.py:63
    // amount=0,
    intc_0 // 0
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/crazy_contract/contract.py:61
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    // smart_contracts/crazy_contract/contract.py:65
    // fee=1000,
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/crazy_contract/contract.py:61-66
    // itxn.Payment(
    //     receiver=self.owner,
    //     amount=0,
    //     close_remainder_to=self.owner,
    //     fee=1000,
    // ).submit()
    itxn_submit
    retsub
